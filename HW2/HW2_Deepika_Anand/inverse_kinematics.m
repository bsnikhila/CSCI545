function thetad = inverse_kinematics(u)% performs inverse kinematics computations with various methods% Stefan Schaal, March 2009% split the input u into meaningful quantitiesn = (length(u)-2)/2;theta = u(1:n);xd    = u(n+1:n+2);links = u(n+3:end);n = length(theta);m = length(xd);% Center of mass JacobianJ14=-links(4)*sin(theta(1)+theta(2)+theta(3)+theta(4));J13=-2*links(3)*sin(theta(1)+theta(2)+theta(3))+J14;J12=-3*links(2)*sin(theta(1)+theta(2))+J13;J11=-4*links(1)*sin(theta(1))+J12;J24=links(4)*cos(theta(1)+theta(2)+theta(3)+theta(4));J23=2*links(3)*cos(theta(1)+theta(2)+theta(3))+J24;J22=3*links(2)*cos(theta(1)+theta(2))+J23;J21=4*links(1)*cos(theta(1))+J22;J = [J11 J12 J13 J14; J21 J22 J23 J24];J = (1/4).*J%Part g : TransposeJt=transpose(J);%thetad = Jt*xd;  %Part h : Pseudo-InverseJhash = Jt/(J*Jt);%thetad = Jhash*xd;  %Part i : pseudo-inverse with Null-space optimizationI = eye(n)theta0 = [0.5 ;0.5; 0.5; 0.5];%hetad = Jhash*xd + (I-Jhash*J)*(theta0-theta); %Part j : Weighted pseudo-inversew=[0.1,0.2, 0.3, 0.5];W=eye(n).*[w;w;w;w];Wi=inv(W);Jhashw=Wi*J'/(J*Wi*J');%thetad = Jhashw * xd%Part k: Weights in null-space optimizationthetad = Jhashw*xd + (I-Jhashw*J)*(theta0-theta);  